from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic
from django.utils import timezone
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, viewsets
from . serializers import QuestionSerializer

from .models import Choice, Question

# def index(request):
# 	latest_question_list = Question.objects.order_by('-pub_date')[:5]
# 	context = {'latest_question_list': latest_question_list	}
# 	return render(request, 'polls/index.html', context)

# def detail(request, question_id):
# 	question = get_object_or_404(Question, pk=question_id)
# 	return render(request, 'polls/detail.html', {'question': question})

# def results(request, question_id):
# 	result = get_object_or_404(Question, pk=question_id)
# 	return render(request, 'polls/results.html', {'result': result})
class QuestionViewSet(viewsets.ModelViewSet):
	queryset=Question.objects.all()
	serializer_class = QuestionSerializer

class QuestionList(APIView):
	def get(self,request):
		q = Question.objects.all()
		serializer = QuestionSerializer(q, many=True)
		return Response(serializer.data)

	def post(self):
		passclass IndexView(generic.ListView):
	template_name='polls/index.html'
	context_object_name='latest_question_list'

	def get_queryset(self):
		"""Return the last five published quesions
		not including those set to be published in
		the future)."""
		return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]

class DetailView(generic.DetailView):
	model=Question
	template_name='polls/detail.html'
	def get_queryset(self):
		return Question.objects.filter(pub_date__lte=timezone.now())

class ResultsView(generic.DetailView):
	model=Question
	template_name='polls/results.html'

def vote(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	try:
		selected_choice = question.choice_set.get(pk=request.POST['choice'])
	except(KeyError, Choice.DoesNotExist):
		return render(request, 'polls/details.html', {
			'question': question,
			'error_message': "You didn't select a choice.",
			})
	else:
		selected_choice.votes += 1
		selected_choice.save()
		return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

	# return HttpResponse("You're voting on question %s." % question_id)
